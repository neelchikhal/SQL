SQL SELECT DISTINCT Statement
-----------------------------

The SELECT DISTINCT statement is used to return only distinct (different) values.
Inside a table, a column often contains many duplicate values; and sometimes you 
only want to list the different (distinct) values.
The SELECT DISTINCT statement is used to return only distinct (different) values.

Syntax :-
SELECT DISTINCT column1, column2, ...
FROM table_name;


SQL WHERE Clause
-----------------

The WHERE clause is used to filter records.
The WHERE clause is used to extract only those records that fulfill a specified condition.

WHERE Syntax:

SELECT column1, column2, ...
FROM table_name
WHERE condition; 

Eg :-

SELECT * FROM Customers
WHERE Country='Mexico'; 

SELECT * FROM Customers
WHERE CustomerID=1; 

Operators in The WHERE Clause
-----------------------------

Operator 	Description
= 		Equal
<> 		Not equal. Note: In some versions of SQL this operator may be written as !=
> 		Greater than
< 		Less than
>= 		Greater than or equal
<= 		Less than or equal
BETWEEN 	Between an inclusive range
LIKE 		Search for a pattern
IN 		To specify multiple possible values for a column

The SQL AND, OR and NOT Operators
---------------------------------

The AND and OR operators are used to filter records based on more than one condition:

    The AND operator displays a record if all the conditions separated by AND is TRUE.
    The OR operator displays a record if any of the conditions separated by OR is TRUE.
    The NOT operator displays a record if the condition(s) is NOT TRUE.

Combining AND, OR and NOT
-------------------------

Eg:-

SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='München'); 

SELECT * FROM Customers
WHERE NOT Country='Germany' AND NOT Country='USA';

The SQL ORDER BY Keyword
------------------------

The ORDER BY keyword is used to sort the result-set in ascending or descending order.
The ORDER BY keyword sorts the records in ascending order by default. To sort the records 
in descending order, use the DESC keyword.


ORDER BY Syntax

SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC; 


Eg :-

SELECT * FROM Customers
ORDER BY Country;

SELECT * FROM Customers
ORDER BY Country, CustomerName; 

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC; 



SQL TOP, LIMIT or ROWNUM Clause
-------------------------------

The SQL SELECT TOP Clause
-------------------------

The SELECT TOP clause is used to specify the number of records to return.
The SELECT TOP clause is useful on large tables with thousands of records. 
Returning a large number of records can impact on performance.

--------
Note
--------

Not all database systems support the SELECT TOP clause. 
MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses ROWNUM.

SQL Server / MS Access Syntax:

SELECT TOP number|percent column_name(s)
FROM table_name
WHERE condition; 

MySQL Syntax:

SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number; 

Oracle Syntax:
SELECT column_name(s)
FROM table_name
WHERE ROWNUM <= number;

---------------------------------
The SQL MIN() and MAX() Functions
---------------------------------

The MIN() function returns the smallest value of the selected column.

The MAX() function returns the largest value of the selected column.

MIN() Syntax :

SELECT MIN(column_name)
FROM table_name
WHERE condition; 

MAX() Syntax :

SELECT MAX(column_name)
FROM table_name
WHERE condition; 

Eg :-

SELECT MIN(Price) AS SmallestPrice
FROM Products;

--------------------------------------
SQL COUNT(), AVG() and SUM() Functions
--------------------------------------

The COUNT() function returns the number of rows that matches a specified criteria.

COUNT() Syntax :-
SELECT COUNT(column_name)
FROM table_name
WHERE condition;

The AVG() function returns the average value of a numeric column.

AVG() Syntax :-
SELECT AVG(column_name)
FROM table_name
WHERE condition;

The SUM() function returns the total sum of a numeric column.

SUM() Syntax :-
SELECT SUM(column_name)
FROM table_name
WHERE condition; 

SQL LIKE Operator
-----------------

The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards used in conjunction with the LIKE operator:

    % - The percent sign represents zero, one, or multiple characters
    _ - The underscore represents a single character


LIKE Syntax :-

SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern; 

Eg :-

LIKE Operator 				Description

WHERE CustomerName LIKE 'a%' 		Finds any values that start with "a"
WHERE CustomerName LIKE '%a' 		Finds any values that end with "a"
WHERE CustomerName LIKE '%or%' 		Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%' 		Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%_%' 	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName  LIKE 'a%o' 		Finds any values that start with "a" and ends with "o"


SQL Wildcards
-------------

Using the [charlist] Wildcard
-----------------------------

The following SQL statement selects all customers with a City starting with "b", "s", or "p":

SELECT * FROM Customers
WHERE City LIKE '[bsp]%';

The following SQL statement selects all customers with a City starting with "a", "b", or "c":

SELECT * FROM Customers
WHERE City LIKE '[a-c]%';

Using the [!charlist] Wildcard
------------------------------

The two following SQL statements select all customers with a City NOT starting with "b", "s", or "p":

SELECT * FROM Customers
WHERE City LIKE '[!bsp]%'; 



SQL IN Operator
---------------

The IN operator allows you to specify multiple values in a WHERE clause.

The IN operator is a shorthand for multiple OR conditions.

SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');

SQL BETWEEN Operator
--------------------

The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
The BETWEEN operator is inclusive: begin and end values are included.


SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2; 

Dates Eg :-

SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;


---------------------
SQL UNION Operator
---------------------

The UNION operator is used to combine the result-set of two or more SELECT statements.

    Each SELECT statement within UNION must have the same number of columns
    The columns must also have similar data types
    The columns in each SELECT statement must also be in the same order

UNION Syntax:

SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2; 

The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL


----------------------
SQL GROUP BY Statement
----------------------


The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group 
the result-set by one or more columns.

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s); 


-----------------
SQL HAVING Clause
-----------------


The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.


SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);


-------------------------
SQL ANY and ALL Operators
-------------------------

The ANY and ALL operators are used with a WHERE or HAVING clause.

The ANY operator returns true if any of the subquery values meet the condition.

ANY Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name operator ANY
(SELECT column_name FROM table_name WHERE condition); 


The ALL operator returns true if all of the subquery values meet the condition.

ALL Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name operator ALL
(SELECT column_name FROM table_name WHERE condition); 

Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).

Eg :-

SELECT ProductName
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10); 


SELECT ProductName
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity > 99); 

-------------------------
SQL SELECT INTO Statement
-------------------------


The SELECT INTO statement copies data from one table into a new table.

Copy all columns into a new table:
SELECT *
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition; 


--------------------------------------------------
The following SQL statement creates a backup copy of 
Customers:

SELECT * INTO CustomersBackup2017
FROM Customers; 

The following SQL statement uses the IN clause to copy the table 
into a new table in another database:

SELECT * INTO CustomersBackup2017 IN 'Backup.mdb'
FROM Customers; 

--------------------------------------------------

Copy only some columns into a new table:
SELECT column1, column2, column3, ...
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition; 


---------------------------------
SQL INSERT INTO SELECT Statement
---------------------------------

The INSERT INTO SELECT statement copies data from one table and inserts it into another table.

    INSERT INTO SELECT requires that data types in source and target tables match
    The existing records in the target table are unaffected

INSERT INTO SELECT Syntax

Copy all columns from one table to another table:
INSERT INTO table2
SELECT * FROM table1
WHERE condition;

Copy only some columns from one table into another table:
INSERT INTO table2 (column1, column2, column3, ...)
SELECT column1, column2, column3, ...
FROM table1
WHERE condition;


------------------
SQL NULL Functions
------------------

SQL IFNULL()-->(MYSQL), ISNULL(), COALESCE()--->(MYSQL), and NVL()-->(oracle) Functions

MySQL

The MySQL IFNULL() function lets you return an alternative value if an expression is NULL:
SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))
FROM Products

or we can use the COALESCE() function, like this:
SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))
FROM Products 


------------------------------------
SQL Stored Procedures for SQL Server
------------------------------------

A stored procedure is a prepared SQL code that you can save, so the code can be reused over 
and over again.
So if you have an SQL query that you write over and over again, save it as a stored procedure, 
and then just call it to execute it.
You can also pass parameters to a stored procedure, so that the stored procedure can act based 
on the parameter value(s) that is passed.

Stored Procedure Syntax:

CREATE OR REPLACE PROCEDURE procedure_name
AS
sql_statement
GO;

Execute a Stored Procedure:

EXEC procedure_name; 

Stored Procedure With One Parameter
-----------------------------------

CREATE OR REPLACE PROCEDURE SelectAllCustomers @City nvarchar(30)
AS
SELECT * FROM Customers WHERE City = @City
GO;

Execute the stored procedure above as follows:

EXEC SelectAllCustomers City = "London";

Stored Procedure With Multiple Parameters
-----------------------------------------

CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10)
AS
SELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode
GO;

EXEC SelectAllCustomers City = "London", PostalCode = "WA1 1DP"; 


==========================================================================================================================
==========================================================================================================================
==========================================================================================================================
==========================================================================================================================



------------
SQL Database
------------


SQL CREATE DATABASE Statement
-----------------------------

The CREATE DATABASE statement is used to create a new SQL database.

Syntax:

CREATE DATABASE databasename;


SQL DROP DATABASE Statement
---------------------------

The DROP DATABASE statement is used to drop an existing SQL database.

Syntax:

DROP DATABASE databasename;

Note: Be careful before dropping a database. Deleting a database will result in loss of complete 
information stored in the database!

SQL DROP TABLE Statement
------------------------

The DROP TABLE statement is used to drop an existing table in a database.

Syntax:

DROP TABLE table_name;

Note: Be careful before dropping a table. Deleting a table will result in loss of complete 
information stored in the table!

SQL TRUNCATE TABLE
------------------

The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.

Syntax:

TRUNCATE TABLE table_name;


SQL ALTER TABLE Statement
-------------------------

The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
The ALTER TABLE statement is also used to add and drop various constraints on an existing table.

ALTER TABLE - ADD Column

To add a column in a table, use the following syntax:

ALTER TABLE table_name
ADD column_name datatype;
ALTER TABLE - DROP COLUMN

To delete a column in a table, use the following syntax 
(notice that some database systems don't allow deleting a column)

ALTER TABLE table_name
DROP COLUMN column_name; 

ALTER TABLE - ALTER/MODIFY COLUMN
---------------------------------
My SQL / Oracle (prior version 10G):

ALTER TABLE table_name
MODIFY COLUMN column_name datatype;

Oracle 10G and later:

ALTER TABLE table_name
MODIFY column_name datatype; 

SQL Constraints
----------------


SQL constraints are used to specify rules for data in a table.

SQL Create Constraints
----------------------

Constraints can be specified when the table is created with the CREATE TABLE statement, 
or after the table is created with the ALTER TABLE statement.

Syntax:

CREATE TABLE table_name (
    column1 datatype constraint,
    column2 datatype constraint,
    column3 datatype constraint,
    ....
);

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and 
reliability of the data in the table. If there is any violation between the constraint and the data action, 
the action is aborted.

Constraints can be column level or table level. Column level constraints apply to a column, and table level 
constraints apply to the whole table.

The following constraints are commonly used in SQL:

    NOT NULL    - Ensures that a column cannot have a NULL value
    UNIQUE      - Ensures that all values in a column are different
    PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
    FOREIGN KEY - Uniquely identifies a row/record in another table
    CHECK       - Ensures that all values in a column satisfies a specific condition
    DEFAULT     - Sets a default value for a column when no value is specified
    INDEX       - Used to create and retrieve data from the database very quickly


SQL UNIQUE Constraint on CREATE TABLE
-------------------------------------

The UNIQUE constraint ensures that all values in a column are different.

MySQL:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
); 

To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:
----------------------------------------------------------------------------------------------------------------

MySQL / SQL Server / Oracle / MS Access:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
); 

SQL PRIMARY KEY Constraint
--------------------------

The PRIMARY KEY constraint uniquely identifies each record in a database table.
Primary keys must contain UNIQUE values, and cannot contain NULL values.


MySQL:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
); 

SQL Server / Oracle / MS Access:

CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
); 

SQL FOREIGN KEY Constraint
--------------------------
A FOREIGN KEY is a key used to link two tables together.

A FOREIGN KEY is a field (or collection of fields) in one table that refers to the 
PRIMARY KEY in another table.

The table containing the foreign key is called the child table, and the table containing 
the candidate key is called the referenced or parent table.

The following SQL creates a FOREIGN KEY on the "PersonID" column when the "Orders" table is created:

MySQL:

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
); 

SQL Server / Oracle / MS Access:


CREATE TABLE Orders (
    OrderID int NOT NULL PRIMARY KEY,
    OrderNumber int NOT NULL,
    PersonID int FOREIGN KEY REFERENCES Persons(PersonID)
); 


SQL CHECK Constraint
--------------------

The CHECK constraint is used to limit the value range that can be placed in a column.

If you define a CHECK constraint on a single column it allows only certain values for this column.

If you define a CHECK constraint on a table it can limit the values in certain columns 
based on values in other columns in the row.


SQL CHECK on CREATE TABLE

The following SQL creates a CHECK constraint on the "Age" column when the "Persons" table is created. 
The CHECK constraint ensures that you can not have any person below 18 years:

MySQL:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
); 

To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, 
use the following SQL syntax:

MySQL / SQL Server / Oracle / MS Access:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
); 

SQL DEFAULT Constraint
----------------------

The DEFAULT constraint is used to provide a default value for a column.

The default value will be added to all new records IF no other value is specified.

My SQL / SQL Server / Oracle / MS Access:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
); 

-----------
IMPORTANT
-----------

The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():

CREATE TABLE Orders (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate date DEFAULT GETDATE()
); 


SQL AUTO INCREMENT Field
------------------------
Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.

Often this is the primary key field that we would like to be created automatically every time a new record is inserted.

Syntax for MySQL

The following SQL statement defines the "ID" column to be an auto-increment primary key field in the "Persons" table:

CREATE TABLE Persons (
    ID int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.

By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.

To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:

ALTER TABLE Persons AUTO_INCREMENT=100; 

------------
IMPORTANT
------------
==========================================================================================================================
Syntax for Oracle
-----------------

In Oracle the code is a little bit more tricky.

You will have to create an auto-increment field with the sequence object (this object generates a number sequence).

Use the following CREATE SEQUENCE syntax:
CREATE SEQUENCE seq_person
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

The code above creates a sequence object called seq_person, that starts with 1 and will increment by 1. 
It will also cache up to 10 values for performance. The cache option specifies how many sequence values 
will be stored in memory for faster access.

To insert a new record into the "Persons" table, we will have to use the nextval function (this function 
retrieves the next value from seq_person sequence):

INSERT INTO Persons (ID,FirstName,LastName)
VALUES (seq_person.nextval,'Lars','Monsen');

The SQL statement above would insert a new record into the "Persons" table. The "ID" column would be 
assigned the next number from the seq_person sequence. The "FirstName" column would be set to "Lars" 
and the "LastName" column would be set to "Monsen".

==========================================================================================================================


SQL Working With Dates
----------------------


The most difficult part when working with dates is to be sure that the format of the date you are trying to insert, 
matches the format of the date column in the database.

MySQL comes with the following data types for storing a date or a date/time value in the database:

    DATE - format YYYY-MM-DD
    DATETIME - format: YYYY-MM-DD HH:MI:SS
    TIMESTAMP - format: YYYY-MM-DD HH:MI:SS
    YEAR - format YYYY or YY

SQL Views
---------

In SQL, a view is a virtual table based on the result-set of an SQL statement.

A view contains rows and columns, just like a real table. The fields in a view are fields from one 
or more real tables in the database.

You can add SQL functions, WHERE, and JOIN statements to a view and present the data as if the data were 
coming from one single table.

CREATE VIEW Syntax :

CREATE OR REPLACE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition


==========================================================================================================================
==========================================================================================================================
==========================================================================================================================


SQL Data Types
--------------


Text data types :
-----------------


Data type 	        Description

CHAR(size) 	        Holds a fixed length string (can contain letters, numbers, and special characters). 
                        The fixed size is specified in parenthesis. Can store up to 255 characters

VARCHAR(size) 	        Holds a variable length string (can contain letters, numbers, and special characters). 
                        The maximum size is specified in parenthesis. Can store up to 255 characters. 
                        Note: If you put a greater value than 255 it will be converted to a TEXT type

TINYTEXT 	        Holds a string with a maximum length of 255 characters

TEXT 	                Holds a string with a maximum length of 65,535 characters

BLOB 	                For BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data

MEDIUMTEXT 	        Holds a string with a maximum length of 16,777,215 characters

MEDIUMBLOB 	        For BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data

LONGTEXT 	        Holds a string with a maximum length of 4,294,967,295 characters

LONGBLOB 	        For BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data

ENUM(x,y,z,etc.) 	Let you enter a list of possible values. You can list up to 65535 values in an ENUM list. 
			If a value is inserted that is not in the list, a blank value will be inserted.

Note: The values are sorted in the order you enter them.
You enter the possible values in this format: ENUM('X','Y','Z')
SET 	Similar to ENUM except that SET may contain up to 64 list items and can store more than one choice



Number data types:
------------------

Data type 	Description
TINYINT(size) 	-128 to 127 normal. 0 to 255 UNSIGNED*. 
		The maximum number of digits may be specified in parenthesis

SMALLINT(size) 	-32768 to 32767 normal. 0 to 65535 UNSIGNED*. The maximum number of digits 
		may be specified in parenthesis

MEDIUMINT(size) -8388608 to 8388607 normal. 0 to 16777215 UNSIGNED*. The maximum number of digits 
		may be specified in parenthesis

INT(size) 	-2147483648 to 2147483647 normal. 0 to 4294967295 UNSIGNED*. The maximum number of digits 
		may be specified in parenthesis

BIGINT(size) 	-9223372036854775808 to 9223372036854775807 normal. 0 to 18446744073709551615 UNSIGNED*. 
		The maximum number of digits may be specified in parenthesis

FLOAT(size,d) 	A small number with a floating decimal point. The maximum number of digits may be specified in 
		the size parameter. The maximum number of digits to the right of the decimal point is specified 
		in the d parameter

DOUBLE(size,d) 	A large number with a floating decimal point. The maximum number of digits may be specified in 
		the size parameter. The maximum number of digits to the right of the decimal point is specified 
		in the d parameter

DECIMAL(size,d) A DOUBLE stored as a string , allowing for a fixed decimal point. The maximum number of digits 
		may be specified in the size parameter. The maximum number of digits to the right of the decimal 
		point is specified in the d parameter

*The integer types have an extra option called UNSIGNED. Normally, the integer goes from an negative to positive value. 
Adding the UNSIGNED attribute will move that range up so it starts at zero instead of a negative number. 



Date data types:
---------------

Data type 	Description
DATE() 		A date. Format: YYYY-MM-DD

Note: The supported range is from '1000-01-01' to '9999-12-31'

DATETIME() 	*A date and time combination. Format: YYYY-MM-DD HH:MI:SS

Note: The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'

TIMESTAMP() 	*A timestamp. TIMESTAMP values are stored as the number of seconds since the 
		Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD HH:MI:SS

Note: The supported range is from '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC

TIME() 		 A time. Format: HH:MI:SS

Note: The supported range is from '-838:59:59' to '838:59:59'

YEAR() 		A year in two-digit or four-digit format.

Note: Values allowed in four-digit format: 1901 to 2155. Values allowed in two-digit format: 70 to 69, 
representing years from 1970 to 2069

*Even if DATETIME and TIMESTAMP return the same format, they work very differently. In an INSERT or UPDATE 
query, the TIMESTAMP automatically set itself to the current date and time. TIMESTAMP also accepts various formats, 
like YYYYMMDDHHMISS, YYMMDDHHMISS, YYYYMMDD, or YYMMDD.


==========================================================================================================================
==========================================================================================================================
==========================================================================================================================


MySQL Functions
---------------

MySQL String Functions
----------------------

	MySQL ASCII() Function
	----------------------
Example

Return the number code of the first character in "CustomerName":

SELECT ASCII(CustomerName) AS NumCodeOfFirstChar
FROM Customers; 

	MySQL CHAR_LENGTH() Function
	----------------------------
Example

Return the length of the string:

SELECT CHAR_LENGTH("SQL Tutorial") AS LengthOfString; 


	MySQL CHARACTER_LENGTH() Function
	---------------------------------
The CHARACTER_LENGTH() function returns the length of the specified string (in characters).

Note: When using this function, a multi-byte character is counted as a single character.

Note: This function is equal to the CHAR_LENGTH() function.

Example

Return the length of the text in the "CustomerName" column:

SELECT CHARACTER_LENGTH(CustomerName) AS LengthOfName
FROM Customers; 

	MySQL CONCAT() Function
	-----------------------
The CONCAT() function concatenates two or more expressions together.

Syntax
------
CONCAT(expression1, expression2, expression3,...)

Parameter  Values

Parameter 	Description
expression1,
expression2,
expression3	Required. The expressions to concatenate together.

Note: If expression is a numeric value, it will be converted to a binary string. 
If all expressions are nonbinary strings, this function will return a nonbinary string. 
If any of the expressions is a binary string, this function will return a binary string. If any of 
the expressions is a NULL, this function will return a NULL value.

Example

Concatenate three columns into one "Address" column:
SELECT CONCAT(Address, " ", PostalCode, " ", City) AS Address
FROM Customers; 

	MySQL CONCAT_WS() Function
	--------------------------

The CONCAT_WS() function concatenates two or more expressions together and adds a separator between them.

Syntax

CONCAT_WS(separator, expression1, expression2, expression3,...)

Parameter Values

separator 	Required. The separator to add between each of the concatenated expressions. If separator is a NULL, 
		this function will return a NULL value

expression1,    Required. The expressions to concatenate together. Expressions that contain a NULL 	
expression2,    value will be skipped
expression3,
etc. 	

Example

Concatenate three columns (and add a space between them) into one "Address" column:


SELECT CONCAT_WS(" ", Address, PostalCode, City) AS Address
FROM Customers; 


	MySQL INSERT() Function
	-----------------------

The INSERT() function inserts a substring into a string at a specified position for a certain number of characters

Parameter 	Description
string 		Required. The string that will be modified
position 	Required. The position where to insert the substring
number 		Required. The number of characters to replace
substring 	Required. The substring to insert into string

Note

==>The first position in string is 1
==>If position is not within the length of string, INSERT() will return string
==>If number is not within the length of the rest of the string, INSERT() will replace string starting from 
   position until the end of string

Example

Insert the string "no" into the string "W3Schools.com". Replace three characters, starting from position 11:


SELECT INSERT("W3Schools.com", 11, 3, "no"); 


	MySQL INSTR() Function
	----------------------

The INSTR() function returns the position of the first occurrence of a string in another string.

Syntax
INSTR(string, substring) 

Parameter 	Description

string 		Required. The string that will be searched
substring 	Required. The substring to search for in string

Example

Search for "COM" in string "W3Schools.com", and return position:

SELECT INSTR("W3Schools.com", "COM") AS MatchPosition; 


	MySQL LCASE() Function
	----------------------

The LCASE() function converts a string to lower-case.

Syntax
LCASE(text) 

Example

Convert the text in "CustomerName" to lower-case:
SELECT LCASE(CustomerName) AS LowercaseCustomerName
FROM Customers; 


	MySQL LEFT() Function
	---------------------

The LEFT() function extracts a substring from a string (starting from left).

Syntax
LEFT(string, number_of_chars) 

Example

Extract a substring from the text in a column (starting from left):

SELECT LEFT(CustomerName, 5) AS ExtractString
FROM Customers; 


	MySQL LENGTH() Function
	-----------------------

The LENGTH() function returns the length of the specified string (in bytes).

Syntax
LENGTH(string)

Example

Return the length of the text in the "CustomerName" column, in bytes:

SELECT LENGTH(CustomerName) AS LengthOfName
FROM Customers; 

	
	MySQL LOCATE() Function
	-----------------------

The LOCATE() function returns the position of the first occurrence of a substring in a string.

Syntax
LOCATE(substring, string, start) 

Note

    LOCATE() performs a case-insensitive search
    The first position in string is 1
    If substring is not found within string, the LOCATE() function will return 0

Example

Search for "a" in CustomerName column, and return position:
SELECT LOCATE("a", CustomerName)
FROM Customers; 

	MySQL LPAD() Function
	---------------------

The LPAD() function returns a string that is left-padded with a specified string to a certain length.

Syntax
LPAD(string, length, pad_string) 

Note: If string is longer than length, the LPAD() function will remove the over floating characters from string. 


Example

Left-pad the text in "CustomerName" with "ABC", to a total length of 30:

SELECT LPAD(CustomerName, 30, "ABC") AS LeftPadCustomerName
FROM Customers; 

	MySQL RPAD() Function
	---------------------

The RPAD() function returns a string that is right-padded with a specified string to a certain length.

Syntax
RPAD(string, length, pad_string) 

Example

Right-pad the text in "CustomerName" with "ABC", to a total length of 30:

SELECT RPAD(CustomerName, 30, "ABC") AS RightPadCustomerName
FROM Customers; 

	MySQL LTRIM() Function
	----------------------

The LTRIM() function removes leading spaces from a string.

Syntax
LTRIM(string) 


	MySQL MID() Function
	--------------------

The MID() function extracts a substring from a string (starting at any position).

Syntax
MID(string, start, length) 

Note

    The first position in string is 1
    If start is a positive number, the MID() function starts from the beginning of the string
    If start is a negative number, the MID() function starts from the end of the string

Example

Extract a substring from the text in a column (start at position 2, extract 5 characters):

SELECT MID(CustomerName, 2, 5) AS ExtractString
FROM Customers; 

Extract a substring from a string (start from the end, at position -5, extract 5 characters):

SELECT MID("SQL Tutorial", -5, 5) AS ExtractString; 


	MySQL POSITION() Function
	-------------------------

The POSITION() function returns the position of the first occurrence of a substring in a string.

Syntax
POSITION(substring IN string) 

Note

    POSITION() performs a case-insensitive search
    The first position in string is 1
    If substring is not found within string, the POSITION() function will return 0

Example

Search for "COM" in string "W3Schools.com", and return position:

SELECT POSITION("COM" IN "W3Schools.com") AS MatchPosition; 

	MySQL REPEAT() Function
	-----------------------

The REPEAT() function repeats a string a specified number of times.
Syntax
REPEAT(string, number) 

Repeat the text in CustomerName two times:

SELECT REPEAT(CustomerName, 2)
FROM Customers; 


	MySQL REPLACE() Function
	------------------------

The REPLACE() function replaces all occurrences of a specified string.

Note: The REPLACE() function performs a case-sensitive replacement.
Syntax
REPLACE(string, from_substring, to_substring) 

Example

Replace the substring "A" with "B":
SELECT REPLACE("ABC ABC ABC", "A", "B"); 

	MySQL REVERSE() Function
	------------------------

The REVERSE() function reverses a string and returns the result.

Syntax
REVERSE(string) 

Example

Reverse the text in CustomerName:
SELECT REVERSE(CustomerName)
FROM Customers; 

	MySQL SPACE() Function
	----------------------

The SPACE() function returns a string with a specified number of spaces.

Syntax
SPACE(number) 




	